# Bem-vindo ao Terminal Matrix 🤖

```
 /\___/\   BASH CYBERPUNK LEARNING MATRIX v1.0
(=^.^=)   ================================
 (")_(")   Onde os hackers nascem...
```

## Aviso de Segurança Neural ⚠️

Tip:

Este tutorial contém altos níveis de:

* Comandos poderosos

* Humor nerd

* Referências geek

* Potencial para causar caos controlado

Prossiga por sua conta e risco.

## Manifesto do Terminal

Cansado de clicar em botões como um mero mortal?
Prepare-se para ascender ao próximo nível da existência computacional.
Aqui você aprenderá a domar o terminal e dobrar a matrix ao seu comando.

## O que te Aguarda

### 🎯 Sua Missão (caso aceite):

* Dominar a arte ancestral da linha de comando

* Automatizar tarefas mundanas

* Impressionar seus amigos com comandos obscuros

* Não destruir seu sistema (isso é importante)

### 💊 Escolha sua Pílula:

```
🔵 GUI Confortável    🔴 Terminal Matrix
     (boring)         (awesome)
```

## Pré-requisitos para a Jornada

* [x] Um terminal (duh!)

* [x] Dedos funcionais

* [x] Backup dos seus arquivos (confie em mim)

* [x] Disposição para aprender

* [x] Senso de humor

* [ ] Medo de tela preta

## Como Usar este Guia

### 📚 Estrutura do Conhecimento:

```
INICIANTE -> SOBREVIVENTE -> GUERREIRO -> MESTRE DO BASH
    |           |              |             |
 Módulo 1    Módulo 2       Módulo 3     Módulo 4
```

### 🎮 Em Cada Capítulo Você Encontrará:

* 📖 Teoria (o mínimo possível)

* 💻 Prática (o máximo possível)

* 🎯 Desafios (para testar sua coragem)

* 💡 Dicas (para não quebrar tudo)

* 🎵 Easter eggs (porque sim)

## Regras do Terminal Club

1. Não fale sobre `rm -rf /`

2. NÃO FALE SOBRE `rm -rf /`

3. Sempre tenha um backup

4. O terminal está sempre certo

5. Exceto quando não está

## Começando sua Jornada

```BASH
$ echo "Hello, brave terminal warrior!"
$ ./start_journey.sh
```

Tip:

"Com grandes poderes em Bash vêm grandes possibilidades de quebrar tudo"

* Tio Ben do Terminal

## Próximos Passos

Escolha seu destino:

* [Fundamentos do Bash](basics.html) - Para iniciantes corajosos

* [Comandos Essenciais](essential-commands.html) - Para aventureiros determinados

* [Scripts e Automação](null) - Para hackers em ascensão

* [Projetos Práticos](null) - Para quem gosta de ação

Lembre-se: No terminal, ninguém pode ouvir você gritar... mas podem ver seus logs.

```
CARREGANDO MATRIX DO BASH...
[██████████████████████████] 100%
SISTEMA PRONTO. BOA SORTE.
```



# Fundamentos do Bash: Seu Primeiro Jack-In 🔌

```
< INICIANDO SEQUÊNCIA DE TREINAMENTO >
=====================================
     MÓDULO 1: FUNDAMENTOS
=====================================
```

## O que Você Vai Aprender Neste Módulo

Tip:

"Eu não posso te dizer o que é a Matrix. Você tem que ver por si mesmo."

* Morpheus do Terminal

### 🎯 Objetivos de Aprendizado

* Entender o que é o Bash e por que ele é poderoso

* Dominar a navegação básica no terminal

* Executar seus primeiros comandos sem destruir nada

* Compreender o sistema de arquivos como um verdadeiro hacker

## Roteiro de Treinamento

### 

1. [O que é Bash?](what-is-bash.html)

* História e origem

* Por que usar linha de comando?

* Bash vs outros shells

### 

2. [Básico do Terminal](terminal-basics.html)

* Anatomia do terminal

* Prompt de comando

* Sintaxe básica

* Auto-completar (seu melhor amigo)

### 

3. [Primeiros Comandos](first-commands.html)

* Comandos essenciais

* Flags e opções

* Manual de sobrevivência (man pages)

* Combinando comandos

### 

4. [Sistema de Arquivos](file-system.html)

* Estrutura de diretórios

* Navegação

* Manipulação básica de arquivos

* Permissões (não se mate ainda)

## Regras de Sobrevivência

```
REGRA #1: SEMPRE tenha um terminal de backup
REGRA #2: Quando em dúvida, --help
REGRA #3: Ctrl+C é seu botão de ejeção
```

## Dicas do Operador

💡 Protips:

* Tab é seu amigo. Tab duas vezes é seu melhor amigo

* As setas ↑↓ são sua máquina do tempo

* Ctrl+L limpa a tela (mas não seus erros)

* Quando tudo falhar, existe o Stack Overflow

## Exercícios de Iniciação

🎯 Desafios para Praticar:

1. Abra um terminal sem usar o mouse

2. Navegue pelos diretórios sem se perder

3. Leia uma man page sem dormir

4. Use tab-completion 10 vezes seguidas

## Checkpoint de Segurança

⚠️ Antes de Prosseguir, Verifique:

* [ ] Terminal funcionando

* [ ] Backup dos arquivos importantes

* [ ] Vontade de aprender

* [ ] Café na xícara

## Próximos Passos

Escolha seu próximo módulo de treinamento:

* [O que é Bash?](what-is-bash.html)

* [Básico do Terminal](terminal-basics.html)

* [Primeiros Comandos](first-commands.html)

* [Sistema de Arquivos](file-system.html)

Tip:

"Todo expert já foi um noob que decidiu não desistir."

* Antigo provérbio do Terminal

```
STATUS: MÓDULO 1 CARREGADO
[█████░░░░░░░░░░░] 25% COMPLETO
PRÓXIMA LIÇÃO AGUARDANDO INPUT...
```



# O que é Bash: Sua Primeira Pílula Vermelha 💊

Note:

O código de exemplo para este tópico está disponível em `code/module1/what-is-bash/version.sh`. Execute-o para ver uma demonstração prática dos conceitos apresentados aqui.

```
/bin/bash --version
=====================================
GNU bash, version 5.1.16(1)-release
=====================================
```

## A Origem da Matrix

Tip:

"No começo, havia a linha de comando. E era boa."

* Genesis do Unix, versículo 1

O Bash (Bourne Again Shell) nasceu em 1989, criado por Brian Fox para o Projeto GNU. É o sucessor espiritual do Thompson shell e do Bourne shell (sh), mas com superpoderes adicionais.

## Por Que o Bash é Especial?

### 🚀 Características Principais

* Shell padrão na maioria das distros Linux

* Compatível com scripts sh

* Extensível e personalizável

* Poderoso processamento de texto

* Automação de tarefas como um boss

## Bash vs. Outros Shells

```
COMPARAÇÃO DE SHELLS
===================
Bash  ████████████ [Versátil]
Zsh   ███████████░ [Customizável]
Fish  ██████████░░ [Amigável]
sh    ████████░░░░ [Minimalista]
```

### 🥊 Round 1: Bash vs GUI

| Bash |GUI |
-------------
| Rápido |Lento |
| Eficiente |Bonito |
| Scriptável |Clicável |
| Hackável |Limitado |

## Onde o Bash Vive

```BASH
# Localizações comuns do Bash
/bin/bash        # O executável principal
~/.bashrc        # Configurações do usuário
~/.bash_history  # Histórico de comandos
/etc/profile     # Configurações globais
```

## Por Que Aprender Bash?

### 💪 Superpoderes que Você Ganha

1. Automação de tarefas repetitivas

2. Controle total sobre o sistema

3. Debugging mais eficiente

4. Habilidades de administração de sistemas

5. Respeito da comunidade hacker

## Mitos e Verdades

### 🤔 Mitos

* "É só para hackers"

* "Vai substituir todas as GUIs"

* "Preciso memorizar tudo"

### ✅ Verdades

* É uma ferramenta poderosa

* Complementa interfaces gráficas

* A prática leva à perfeição

## Primeiros Passos no Terminal

```BASH
# Verifique sua versão do Bash
echo $BASH_VERSION

# Veja onde está instalado
which bash

# Execute seu primeiro comando
echo "Hello, Matrix!"
```

## Conceitos Básicos

### 🔤 Terminologia Essencial

* Shell: Interface de linha de comando

* Terminal: Emulador que roda o shell

* Prompt: Onde você digita comandos

* Script: Série de comandos em arquivo

## Preparando seu Ambiente

### ⚙️ Checklist de Iniciação

* [ ] Terminal instalado

* [ ] Bash configurado como shell padrão

* [ ] `.bashrc` localizado

* [ ] Permissões básicas configuradas

## Próximos Passos

Agora que você conhece o Bash, é hora de:

1. [Aprender os Básicos do Terminal](terminal-basics.html)

2. [Executar seus Primeiros Comandos](first-commands.html)

3. [Explorar o Sistema de Arquivos](file-system.html)

Tip:

"O Bash não é apenas um shell, é um estilo de vida."

* Hacker Anônimo

```
CARREGANDO PRÓXIMO MÓDULO...
[██████░░░░░░░░░░] 30% COMPLETO
CONHECIMENTO BASE ADQUIRIDO
```



# Básico do Terminal: Sua Interface com a Matrix 🖥️

Note:

Explore o script de exemplo em `code/module1/terminal-basics/customize.sh` para ver demonstrações práticas de personalização do terminal e configurações avançadas.

```
USER@MATRIX:~$ _
=====================================
TERMINAL BÁSICO v1.0
STATUS: CONECTADO
MODO: INICIANTE
PERIGO: MODERADO
=====================================
```

## Anatomia do Terminal

### 🔍 Decodificando o Prompt

```BASH
usuario@maquina:~/pasta$ comando --opcao argumento
^       ^        ^     ^       ^      ^
|       |        |     |       |      |
|       |        |     |       |      └─ Argumentos/Parâmetros
|       |        |     |       └────────── Opções/Flags
|       |        |     └─────────────────── Comando
|       |        └─────────────────────────── Diretório Atual
|       └────────────────────────────────────── Nome da Máquina
└──────────────────────────────────────────────── Seu Username
```

## Elementos Básicos

### 🎯 Componentes Principais

* Prompt: Sua linha de comando na Matrix

* Cursor: O portal piscante entre dimensões

* Output: As respostas da Matrix

* Scrollback: Seus registros temporais

### 🎨 Cores e Estilos

```BASH
# Cores básicas
echo -e "\e[31mVermelho\e[0m"
echo -e "\e[32mVerde\e[0m"
echo -e "\e[33mAmarelo\e[0m"
echo -e "\e[34mAzul\e[0m"

# Estilos
echo -e "\e[1mNegrito\e[0m"
echo -e "\e[4mSublinhado\e[0m"
```

## Navegação Básica

### ⌨️ Atalhos Essenciais

| Atalho |Ação |Descrição |
---------------------------
| `Ctrl + C` |Cancelar |Interrompe o comando atual |
| `Ctrl + L` |Limpar |Limpa a tela (como `clear`) |
| `Ctrl + A` |Início |Move cursor para início da linha |
| `Ctrl + E` |Fim |Move cursor para fim da linha |
| `Ctrl + U` |Limpar Linha |Apaga do cursor até o início |
| `Ctrl + K` |Limpar Frente |Apaga do cursor até o fim |

## Navegação Avançada

### ⌨️ Combo de Atalhos (Modo Hacker)

| Combo |Efeito Especial |Nível de Poder |
------------------------------------------
| `Ctrl + R` + `Ctrl + R` |Pesquisa reversa recursiva |9000+ |
| `Alt + .` |Último argumento do comando anterior |8500+ |
| `Ctrl + X + E` |Abre comando atual no editor |7500+ |
| `Ctrl + W` |Deleta palavra anterior |6000+ |

### 🎮 Modo de Movimento

```BASH
# Navegação Ninja
Alt + F     # Avança uma palavra
Alt + B     # Retrocede uma palavra
Ctrl + XX   # Alterna entre início da linha e posição atual
```

## História e Autocompletar

### ⏳ Navegando no Tempo

```BASH
# Use as setas para navegar no histórico
↑ (Comando anterior)
↓ (Próximo comando)

# Pesquise no histórico
Ctrl + R (Digite para pesquisar)
```

### 🎯 Autocomplete: Seu Melhor Amigo

```BASH
# Pressione TAB para autocompletar
cd Doc[TAB]     # Completa para "Documents"
ls ~/Des[TAB]   # Completa para "Desktop"

# TAB duas vezes mostra todas as opções
ls --[TAB][TAB] # Mostra todas as flags disponíveis
```

## Customização Básica

### 🎨 Personalizando seu Terminal

```BASH
# Cores no prompt
export PS1="\[\033[32m\]\u@\h\[\033[00m\]:\[\033[34m\]\w\[\033[00m\]\$ "

# Aliases úteis
alias ll='ls -la'
alias cls='clear'
alias matrix='echo "Você está na Matrix agora!"'
```

## Customização Matrix

### 🛠️ Configuração do Ambiente

```BASH
# Personalize seu .bashrc
export PS1='\[\033[01;32m\][\u@\h\[\033[01;37m\] \W\[\033[01;32m\]]\$\[\033[00m\] '

# Aliases para Hackers
alias matrix='echo -e "\e[32m" && tr -c "[:digit:]" " " < /dev/urandom | dd cbs=$COLUMNS conv=unblock | GREP_COLOR="1;32" grep --color "[^ ]"'
alias hack='echo "Iniciando invasão..." && sleep 1 && tree /'
alias power='echo "Poder atual: $(( $RANDOM % 9000 + 1000 ))"'
```

### 🎵 Sons e Efeitos

```BASH
# Adicione feedback sonoro (requer beep)
alias alert='echo -e "\a"'
alias mission='echo "Missão completada" && beep -f 500 -l 100'
```

## Modo Multi-terminal

### 📺 Split Screen Powers

* tmux: Divisão de terminal matrix-style

* screen: Sessões persistentes

* terminator: Layout customizado

```BASH
# Comandos tmux básicos
tmux new -s matrix    # Nova sessão
tmux split-window -h  # Split horizontal
tmux split-window -v  # Split vertical
```

## Personalização Avançada

### 🎨 Temas e Cores

```BASH
# Esquemas de cores
export TERM=xterm-256color

# PS1 Cyberpunk
PS1='\[\e[1;32m\][\[\e[1;36m\]\u\[\e[1;32m\]@\[\e[1;36m\]\h\[\e[1;32m\]]\[\e[1;36m\]\w\[\e[1;32m\]\$\[\e[0m\] '
```

## Modo Debug

### 🔍 Ferramentas de Diagnóstico

```BASH
# Debugging básico
set -x           # Ativa modo debug
set +x           # Desativa modo debug
bash -x script.sh # Executa script em modo debug
```

## Dicas de Sobrevivência

### 💡 Protips para Iniciantes

1. Use TAB constantemente

2. Mantenha um olho no prompt

3. Leia as mensagens de erro

4. Quando em dúvida, use `--help`

## Exercícios Práticos

### 🎮 Mini-Desafios

1. Abra o terminal e identifique cada parte do prompt

2. Pratique os atalhos de teclado básicos

3. Crie três aliases personalizados

4. Use TAB para completar 10 comandos diferentes

## Exercícios de Poder

### 🎯 Desafios Matrix

1. Nível 1: Configure 3 aliases personalizados

2. Nível 2: Crie um PS1 customizado com cores

3. Nível 3: Configure tmux com splits

4. Nível 4: Crie um script que use cores

5. Boss Level: Combine todos os anteriores

## Troubleshooting Básico

### 🔧 Problemas Comuns

* Terminal travado? `Ctrl + C` ou `Ctrl + D`

* Comando errado? Use `history` para encontrar o correto

* Perdido? `pwd` mostra onde você está

* Comando não encontrado? Verifique o PATH

## Troubleshooting Avançado

### 🔧 Matrix Glitches

* Terminal corrompido? `reset` ou `tput reset`

* PS1 bugado? `export PS1='$ '` para reset

* Cores malucas? `echo -e "\e[0m"` para resetar

* Terminal travado? Sequência de escape: `Ctrl + Q`

## Easter Eggs

### 🎮 Comandos Secretos

```BASH
# Divirta-se
sl         # Steam Locomotive
cmatrix    # Modo Matrix
cowsay     # Vaca falante
fortune    # Mensagens da sorte
```

## Próximos Passos

Agora que você domina o básico do terminal, é hora de:

1. [Executar seus Primeiros Comandos](first-commands.html)

2. [Explorar o Sistema de Arquivos](file-system.html)

3. [Aprender sobre Permissões](null)

Tip:

"O terminal é como um lightsaber: uma arma elegante, de tempos mais civilizados."

* Obi-Wan KenTerminal

```
CARREGANDO PRÓXIMO MÓDULO...
[████████░░░░░░░░] 40% COMPLETO
INTERFACE NEURAL SINCRONIZADA
PODER TERMINAL: AUMENTANDO
MATRIX: ESTÁVEL
```



# Primeiros Comandos: Hackeando a Matrix 🚀

Note:

Confira o script de exemplo em `code/module1/first-commands/basic_operations.sh` para ver uma demonstração prática das operações básicas com arquivos e diretórios.

```
INICIANDO SEQUÊNCIA DE COMANDOS...
==================================
STATUS: PRONTO PARA HACKEAR
NÍVEL DE ACESSO: INICIANTE
PERIGO: BAIXO (por enquanto)
==================================
```

## Comandos Básicos de Sobrevivência

### 🔍 Reconhecimento do Terreno

#### PWD (Print Working Directory)

```BASH
pwd     # Mostra o caminho completo do diretório atual
pwd -P  # Mostra o caminho físico (resolve links simbólicos)
pwd -L  # Mostra o caminho lógico (padrão)
```

#### LS (List)

```BASH
ls              # Lista arquivos e diretórios
ls -l           # Formato longo com detalhes
ls -a           # Mostra arquivos ocultos
ls -h           # Tamanhos legíveis (1K, 234M, 2G)
ls -R           # Lista recursiva
ls -lart        # Combinação: long, hidden, reverse, time
```

#### CD (Change Directory)

```BASH
cd              # Vai para o diretório home
cd -            # Volta para o último diretório
cd ..           # Sobe um nível
cd ../../       # Sobe dois níveis
cd ~/Documents  # Caminho absoluto
cd ./pasta      # Caminho relativo
```

#### CLEAR

```BASH
clear           # Limpa a tela
Ctrl + L        # Atalho para limpar
reset           # Reinicia o terminal completamente
```

### 📂 Operações de Arquivo Avançadas

#### TOUCH

```BASH
touch arquivo.txt          # Cria arquivo ou atualiza timestamp
touch -t 202312311200     # Define data/hora específica
touch -r ref.txt novo.txt # Copia timestamp de outro arquivo
```

#### CAT (Concatenate)

```BASH
cat arquivo.txt           # Mostra conteúdo
cat -n arquivo.txt       # Mostra números das linhas
cat -b arquivo.txt       # Numera apenas linhas não vazias
cat arq1.txt arq2.txt    # Concatena arquivos
cat > arquivo.txt        # Cria arquivo e aguarda input
```

#### CP (Copy)

```BASH
cp origem.txt destino.txt     # Copia arquivo
cp -r pasta1 pasta2          # Copia diretório recursivamente
cp -i arquivo.txt backup/    # Modo interativo
cp -u *.txt destino/         # Copia apenas arquivos mais novos
cp -v arquivo.txt ~/backup/  # Modo verbose
```

#### MV (Move)

```BASH
mv arquivo.txt ~/Documents/   # Move arquivo
mv arquivo.txt novo_nome.txt # Renomeia arquivo
mv -i *.txt destino/         # Modo interativo
mv -u *.txt destino/         # Move apenas arquivos mais novos
mv -v arquivo.txt ~/backup/  # Modo verbose
```

## Modo Tutorial Interativo Expandido

### 🎮 Mini-Game: Dominando o Terminal

#### Nível 1: Reconhecimento Básico

```BASH
# Missão: Explorar o Território
pwd                         # Identifique sua localização
ls -la                     # Analise o ambiente detalhadamente
cd ~                       # Retorne à base (home)
clear                      # Limpe seus rastros

# Checkpoint 1: Navegação Avançada
cd /                       # Vá para a raiz do sistema
ls -lh                     # Analise com tamanhos legíveis
cd /etc                    # Entre no diretório de configurações
cd -                       # Volte ao último diretório
```

#### Nível 2: Manipulação de Arquivos

```BASH
# Missão: Criar sua Base de Operações
mkdir operacao_alpha       # Crie sua base secreta
cd operacao_alpha         # Entre na base
touch log.txt config.txt   # Crie arquivos de missão
ls -la                    # Verifique a criação

# Checkpoint 2: Modificação de Arquivos
echo "Início da missão" > log.txt     # Adicione conteúdo
echo "Status: Ativo" >> log.txt       # Append conteúdo
cat log.txt                           # Verifique o conteúdo
cp log.txt backup_log.txt            # Crie backup
```

#### Nível 3: Operações Combinadas

```BASH
# Missão: Manipulação Avançada
mkdir -p projetos/{alfa,beta,gamma}   # Crie estrutura complexa
touch projetos/{alfa,beta,gamma}/readme.txt  # Múltiplos arquivos
ls -R projetos                        # Verifique estrutura
find projetos -name "*.txt"          # Localize arquivos
```

## Comandos de Informação Detalhados

### 📊 Status e Ajuda Avançada

#### Informações do Sistema

```BASH
date                  # Data e hora atual
date +"%Y-%m-%d"     # Formato personalizado
whoami               # Usuário atual
id                   # Informações de ID do usuário
uname -a             # Todas as informações do sistema
hostname             # Nome do computador
```

#### Ajuda e Documentação

```BASH
man comando          # Manual completo
comando --help       # Ajuda rápida
info comando         # Documentação detalhada
whatis comando       # Descrição curta
whereis comando      # Localiza binário, fonte e manual
```

### 💡 Dicas Rápidas Avançadas

| Comando |Descrição |Nível de Poder |Exemplo |
-----------------------------------------------
| `!!` |Repete último comando |⚡⚡ |`sudo !!` |
| `!$` |Último argumento |⚡⚡⚡ |`mkdir pasta && cd !$` |
| `!*` |Todos argumentos |⚡⚡⚡ |`echo !*` |
| `!:n` |n-ésimo argumento |⚡⚡⚡⚡ |`!:2` |
| `^old^new` |Substitui no último comando |⚡⚡⚡⚡ |`^foo^bar` |
| `history` |Histórico de comandos |⚡⚡⚡⚡ |`history \\| grep git` |

## Primeiros Scripts Avançados

### 🛠️ Scripts de Poder

#### Script de Backup Básico

```BASH
#!/bin/bash
# backup_script.sh
echo "Iniciando backup..."

# Variáveis
SOURCE_DIR="$HOME/Documents"
BACKUP_DIR="$HOME/Backups"
DATE=$(date +%Y%m%d)

# Criar diretório de backup
mkdir -p "$BACKUP_DIR"

# Realizar backup
tar -czf "$BACKUP_DIR/backup_$DATE.tar.gz" "$SOURCE_DIR"

echo "Backup completo: backup_$DATE.tar.gz"
```

#### Script de Monitoramento

```BASH
#!/bin/bash
# monitor.sh
echo "Monitorando sistema..."

# Informações do sistema
echo "CPU Usage:"
top -bn1 | head -n 3

echo "Memory Usage:"
free -h

echo "Disk Usage:"
df -h
```

## Combinando Comandos - Técnicas Avançadas

### 🔗 Operadores e Redirecionamento

#### Operadores Lógicos

```BASH
# AND (&&) - Execução condicional
mkdir projeto && cd projeto && touch readme.md

# OR (||) - Fallback
ping -c 1 google.com || echo "Sem conexão"

# Semicolon (;) - Execução sequencial
echo "Início" ; sleep 2 ; echo "Fim"
```

#### Redirecionamento

```BASH
# Output redirection
echo "log entry" > log.txt      # Sobrescreve
echo "new entry" >> log.txt     # Append
ls /naoexiste 2> erro.log      # Redireciona erro

# Pipe
ps aux | grep bash             # Filtra processos
ls -la | sort -k5 -n          # Ordena por tamanho
cat arquivo.txt | wc -l       # Conta linhas
```

## Exercícios Práticos Avançados

### 🎯 Missões de Elite

#### Missão #1: Reconhecimento Avançado

```BASH
# Objetivo: Mapeamento completo do sistema
pwd
ls -laR | grep "^d"           # Lista todos diretórios
find . -type f -mtime -1      # Arquivos modificados hoje
du -sh * | sort -hr          # Uso de disco ordenado
```

#### Missão #2: Manipulação Avançada

```BASH
# Objetivo: Gerenciamento de arquivos
mkdir -p projeto/{src,docs,tests}
touch projeto/src/{main,util,helper}.sh
chmod +x projeto/src/*.sh
find projeto -type f -name "*.sh" -exec ls -l {} \;
```

#### Missão #3: Automação Básica

```BASH
# Objetivo: Criar script de automação
cat << 'EOF' > auto_task.sh
#!/bin/bash
echo "Iniciando automação..."
for file in *.txt; do
    echo "Processando $file..."
    cp "$file" "backup_$file"
done
echo "Automação concluída!"
EOF
chmod +x auto_task.sh
```

## Troubleshooting Avançado

### 🔧 Resolução de Problemas Comuns

#### Problemas de Permissão

```BASH
# Verificar permissões
ls -la arquivo.txt
# Modificar permissões
chmod u+x script.sh
# Mudar proprietário
sudo chown user:group arquivo.txt
```

#### Problemas de Comando

```BASH
# Verificar existência do comando
which comando
# Verificar PATH
echo $PATH
# Atualizar PATH
export PATH=$PATH:/novo/caminho
```

#### Problemas de Processo

```BASH
# Listar processos
ps aux | grep processo
# Matar processo
kill -9 PID
# Verificar uso de recursos
top
```

## Power-Ups Avançados (Aliases e Funções)

### ⚡ Configurações de Poder

#### Aliases Avançados

```BASH
# Adicione ao .bashrc
alias ll='ls -la'
alias mkdir='mkdir -p'
alias ports='netstat -tulanp'
alias update='sudo apt update && sudo apt upgrade'
alias gh='history | grep'
```

#### Funções Úteis

```BASH
# Função para criar e entrar em diretório
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Função para backup rápido
bkp() {
    cp "$1" "$1.bak"
}

# Função para extrair arquivos
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)          echo "'$1' não pode ser extraído via extract()" ;;
        esac
    else
        echo "'$1' não é um arquivo válido"
    fi
}
```

## Próximos Passos

Agora que você domina os comandos básicos e avançados:

1. [Explore o Sistema de Arquivos](file-system.html)

* Estrutura de diretórios

* Links simbólicos

* Gerenciamento de espaço

2. [Aprenda sobre Permissões](null)

* Permissões básicas e avançadas

* ACLs

* Sticky bits

3. [Domine o Processamento de Texto](null)

* sed

* awk

* grep avançado

4. [Automação com Scripts](null)

* Loops

* Condicionais

* Funções

Tip:

"O terminal é como um lightsaber: uma arma elegante, de tempos mais civilizados."

* Obi-Wan KenTerminal

```
PROGRESSO DE TREINAMENTO...
[██████████████████] 90%
STATUS: HACKER EM FORMAÇÃO
PRÓXIMO NÍVEL: MESTRE DO TERMINAL

CARREGANDO MÓDULOS AVANÇADOS...
==============================
PODER: AUMENTANDO
CONHECIMENTO: EXPANDINDO
TERMINAL: DOMINADO
```



# Sistema de Arquivos: Navegando na Matrix 📁

Note:

Experimente o script interativo em `code/module1/file-system/file_explorer.sh` para uma exploração prática do sistema de arquivos e suas operações.

```
MAPEANDO ESTRUTURA DA MATRIX...
==============================
/
├── bin/
├── etc/
├── home/
└── usr/

STATUS: ESCANEANDO DIRETÓRIOS
NÍVEL DE ACESSO: INTERMEDIÁRIO
```

## Anatomia do Sistema de Arquivos

### 🌲 A Árvore de Diretórios

```BASH
/                   # Raiz do sistema
├── bin/            # Binários essenciais
├── boot/           # Arquivos de inicialização
├── dev/            # Dispositivos
├── etc/            # Configurações do sistema
├── home/           # Diretórios dos usuários
├── lib/            # Bibliotecas compartilhadas
├── media/          # Mídias removíveis
├── mnt/            # Montagens temporárias
├── opt/            # Pacotes opcionais
├── proc/           # Processos do sistema
├── root/           # Home do superusuário
├── run/            # Dados de runtime
├── sbin/           # Binários do sistema
├── srv/            # Dados de serviços
├── sys/            # Sistema
├── tmp/            # Arquivos temporários
├── usr/            # Programas do usuário
└── var/            # Dados variáveis
```

## Navegação Avançada

### 🗺️ Comandos de Navegação Pro

```BASH
pwd                     # Mostra diretório atual
cd -                    # Volta ao diretório anterior
cd ~                    # Vai para home
cd ..                   # Sobe um nível
pushd /path/to/dir     # Empilha diretório
popd                   # Desempilha diretório
```

### 🔍 Buscando na Matrix

```BASH
find / -name "*.log"    # Busca por nome
locate arquivo.txt      # Busca rápida (requer updatedb)
which comando           # Localiza executável
whereis programa       # Localiza binários e manuais
```

## Manipulação de Arquivos e Diretórios

### 📂 Operações Básicas

```BASH
touch arquivo.txt       # Cria arquivo vazio
mkdir -p dir1/dir2     # Cria diretórios recursivamente
cp -r origem destino   # Copia recursivamente
mv origem destino      # Move/renomeia
rm -rf diretorio       # Remove recursivamente (cuidado!)
```

### 🔗 Links e Atalhos

```BASH
ln arquivo hard_link    # Link físico
ln -s arquivo soft_link # Link simbólico
readlink link          # Mostra destino do link
```

## Análise do Sistema de Arquivos

### 📊 Comandos de Análise

```BASH
df -h                  # Uso do disco
du -sh *              # Tamanho dos arquivos
stat arquivo          # Detalhes do arquivo
file arquivo          # Tipo do arquivo
lsof                  # Arquivos abertos
```

### 🔬 Monitoramento

```BASH
inotifywait -m /path  # Monitora mudanças
ncdu                  # Análise de uso do disco
tree                  # Visualiza estrutura
```

## Permissões e Propriedade

### 🔒 Sistema de Permissões

```BASH
chmod 755 arquivo     # Modifica permissões
chown user:group arq  # Muda proprietário
chgrp grupo arquivo  # Muda grupo
umask 022            # Define máscara
```

### 📋 Interpretando Permissões

```
rwxr-xr--  1 user group  4096  Jan 1 12:00 arquivo
│││││││││
│││││││└└─ outros (r--)
│││││└└── grupo (r-x)
│└└└└─── dono  (rwx)
└────── tipo (-)
```

## Exercícios Práticos

### 🎯 Missão: Exploração do Sistema

1. Reconhecimento

```BASH
# Mapeie sua home
tree ~/ -L 2
# Liste arquivos ocultos
ls -la ~/
# Encontre arquivos grandes
find ~/ -size +100M
```

1. Manipulação

```BASH
# Crie estrutura de diretórios
mkdir -p projeto/{src,docs,tests}
# Crie links simbólicos
ln -s ~/projeto/src ~/src-link
# Archive diretórios
tar -czf backup.tar.gz ~/projeto
```

1. Análise

```BASH
# Analise uso do disco
du -sh */
# Verifique tipos de arquivo
file *
# Monitore mudanças
watch -n 1 'ls -l'
```

## Troubleshooting

### 🔧 Problemas Comuns

* Permissão negada: Use `sudo` ou verifique permissões

* Disco cheio: Use `df -h` e `du -sh *`

* Arquivo não encontrado: Verifique `$PATH` e permissões

* Link quebrado: Use `find -L -type l`

## Power-Ups (Aliases)

### ⚡ Aliases para Navegação

```BASH
# Adicione ao .bashrc
alias ll='ls -la'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias tree='tree --dirsfirst -C'
```

## Próximos Passos

Agora que você domina o sistema de arquivos:

1. [Aprenda sobre Permissões](null)

2. [Explore o Processamento de Texto](null)

3. [Domine os Scripts](null)

Tip:

"O sistema de arquivos é como a Matrix - está em todo lugar, é o que você vê, o que você não vê, e tudo que está entre eles."

* Morpheus do Terminal

```
ANÁLISE DO SISTEMA CONCLUÍDA
[████████████████] 100%
STATUS: MAPEAMENTO COMPLETO
MATRIZ DE ARQUIVOS: DOMINADA
```



# Comandos Essenciais: Dominando as Ferramentas 🛠️

Note:

Os códigos de exemplo para este módulo estão disponíveis em `code/module2/`. Cada subdiretório contém scripts práticos para você experimentar.

```
CARREGANDO ARSENAL DE COMANDOS...
================================
STATUS: FERRAMENTAS PREPARADAS
NÍVEL: INTERMEDIÁRIO
PODER: AUMENTANDO
================================
```

## Visão Geral

Neste módulo, você vai dominar as ferramentas essenciais do terminal, expandindo seu arsenal de comandos para:

* Navegar pelo sistema como um ninja 🥷

* Manipular arquivos com precisão cirúrgica 🎯

* Processar texto como um mestre Jedi ⚔️

* Extrair informações do sistema como um hacker de elite 🕵️

## Tópicos do Módulo

### 

1. [Comandos de Navegação](navigation-commands.html)

* Navegação avançada com `cd`, `pushd`, `popd`

* Buscas com `find` e `locate`

* Atalhos e truques de navegação

* Gerenciamento de diretórios

### 

2. [Operações com Arquivos](null)

* Manipulação avançada com `cp`, `mv`, `rm`

* Compactação e descompactação

* Links simbólicos e hardlinks

* Gerenciamento de permissões

### 

3. [Processamento de Texto](null)

* Filtragem com `grep`

* Transformação com `sed`

* Processamento com `awk`

* Ordenação e contagem

### 

4. [Informações do Sistema](null)

* Monitoramento com `top` e `htop`

* Análise de disco com `df` e `du`

* Gerenciamento de processos

* Informações de rede

## Ferramentas Essenciais

```BASH
# Navegação Avançada
find / -name "*.log" 2>/dev/null    # Busca todos os logs
locate "*.conf"                      # Localiza configs
which python3                        # Onde está o executável?
whereis bash                         # Onde está tudo do bash?

# Operações com Arquivos
tar -czf backup.tar.gz ./docs       # Compacta
tar -xzf backup.tar.gz              # Descompacta
rsync -av source/ dest/             # Sincroniza diretórios
dd if=/dev/zero of=test bs=1M count=100  # Cria arquivo de teste

# Processamento de Texto
grep -r "TODO" .                    # Busca recursiva
sed 's/antigo/novo/g' arquivo.txt   # Substitui texto
awk '{print $1}' dados.txt          # Extrai primeira coluna
sort -u números.txt                 # Ordena e remove duplicatas

# Informações do Sistema
ps aux | grep nginx                 # Processos específicos
netstat -tulpn                      # Portas abertas
free -h                            # Memória disponível
uptime                             # Tempo ligado
```

## Dicas de Poder

### 🎯 Combinando Comandos

```BASH
# Pipeline de processamento
find . -type f -name "*.log" | \
  xargs grep "ERROR" | \
  sort | uniq -c | \
  sort -nr
```

### ⚡ Atalhos de Teclado

* `Ctrl + R`: Busca no histórico

* `Alt + .`: Último argumento

* `Ctrl + W`: Apaga última palavra

* `Ctrl + U`: Apaga linha inteira

## Exercícios Práticos

### 🎓 Missões de Treinamento

1. Navegação Ninja

* Encontre todos os arquivos modificados hoje

* Liste apenas diretórios em uma árvore profunda

* Localize todos os executáveis no PATH

2. Manipulação de Arquivos

* Crie um backup compactado de uma estrutura

* Sincronize dois diretórios

* Encontre e remova arquivos duplicados

3. Processamento de Dados

* Extraia endereços IP de um log

* Conte ocorrências de palavras em múltiplos arquivos

* Substitua texto em vários arquivos

4. Análise do Sistema

* Monitore uso de CPU por processo

* Verifique espaço em disco por diretório

* Liste todas as conexões de rede ativas

## Próximos Passos

Depois de dominar estes comandos essenciais, você estará pronto para:

1. [Automação com Scripts](null)

2. [Administração do Sistema](null)

3. [Redes e Conectividade](null)

Tip:

"Com grandes comandos vem grandes responsabilidades."

* Uncle Terminal

```
CARREGAMENTO CONCLUÍDO
[████████████████] 100%
STATUS: ARSENAL PREPARADO
PODER: INTERMEDIÁRIO
PRÓXIMA MISSÃO: AGUARDANDO...
```



# Comandos de Navegação: Movendo-se como um Ninja 🥷

Note:

O código de exemplo para este tópico está disponível em `code/module2/navigation/nav_demo.sh`. Execute-o para praticar técnicas avançadas de navegação no terminal.

```
CARREGANDO TÉCNICAS DE NAVEGAÇÃO...
==================================
STATUS: NINJA MODE ACTIVATED
NÍVEL: INTERMEDIÁRIO
PODER: MOBILIDADE TOTAL
==================================
```

Neste módulo, você aprenderá a navegar pelo sistema de arquivos com a eficiência de um ninja. Os tópicos incluem:

* Comandos básicos de navegação

* Técnicas avançadas de movimentação

* Gerenciamento de pilha de diretórios

* Busca eficiente com find e locate

* Uso de wildcards e globbing

* Atalhos e truques de navegação

* Automação de navegação

* Resolução de problemas comuns

Escolha um tópico para começar sua jornada rumo ao domínio da navegação no terminal.



# Fundamentos da Navegação 🎯

## Conceitos Básicos

### PWD - Print Working Directory

```BASH
pwd                     # Mostra diretório atual
pwd -P                 # Mostra caminho físico (resolve links simbólicos)
pwd -L                 # Mostra caminho lógico (padrão)
echo $PWD              # Variável de ambiente do diretório atual
```

### LS - List Directory Contents

```BASH
# Listagens básicas
ls                      # Lista simples
ls -l                   # Formato longo
ls -a                   # Mostra arquivos ocultos
ls -h                   # Tamanhos legíveis (human-readable)
ls -R                   # Lista recursiva
ls -S                   # Ordena por tamanho
ls -t                   # Ordena por data de modificação
ls -X                   # Ordena por extensão

# Combinações úteis
ls -lah                 # Listagem completa e legível
ls -ltr                 # Ordem reversa por data
ls -ld */               # Lista apenas diretórios
ls -1                   # Uma entrada por linha
```

### CD - Change Directory

```BASH
# Navegação básica
cd /                    # Vai para raiz
cd ~                    # Home do usuário
cd                      # Também vai para home
cd ..                   # Sobe um nível
cd -                    # Último diretório

# Navegação avançada
cd ~/Documents          # Caminho relativo ao home
cd "Pasta Com Espaços"  # Caminhos com espaços
cd ../pasta_irmã        # Navegação relativa
```

## Truques e Dicas

### Autocompletar

```BASH
# Use TAB para:
cd /e<TAB>             # Completa para /etc
cd /u/l/b<TAB>         # Completa caminhos longos
ls *.p<TAB>            # Completa arquivos por padrão
```

### Histórico de Navegação

```BASH
history | grep cd      # Mostra comandos cd anteriores
!!                     # Repete último comando
!cd                    # Repete último comando cd
```

### Atalhos do Shell

```BASH
CTRL + L               # Limpa a tela
CTRL + W               # Apaga última palavra
CTRL + U               # Apaga linha inteira
CTRL + A               # Início da linha
CTRL + E               # Fim da linha
```

## Configurações Úteis

### Aliases de Navegação

```BASH
# Adicione ao seu .bashrc
alias ll='ls -lah'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
```

### Funções de Navegação

```BASH
# Função para criar e entrar em diretório
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Função para voltar N diretórios
up() {
    local d=""
    limit=$1
    for ((i=1 ; i <= limit ; i++))
        do
            d=$d/..
        done
    d=$(echo $d | sed 's/^\///')
    if [ -z "$d" ]; then
        d=..
    fi
    cd $d
}
```

## Exercícios Práticos

### Nível Iniciante

1. Liste todos os arquivos no seu diretório home, incluindo ocultos

2. Navegue até /etc e liste seu conteúdo em formato longo

3. Volte para seu diretório home usando diferentes métodos

4. Use pwd para verificar sua localização após cada movimento

### Nível Intermediário

1. Crie uma estrutura de diretórios aninhada e navegue por ela

2. Use ls com diferentes combinações de flags

3. Pratique o uso de autocompletar em caminhos longos

4. Experimente os atalhos do shell

### Nível Avançado

1. Configure aliases personalizados para navegação

2. Crie funções de navegação customizadas

3. Implemente um sistema de bookmarks para diretórios

4. Pratique navegação usando apenas atalhos do teclado

## Troubleshooting Comum

### Problemas e Soluções

```BASH
# Permissão negada
ls -ld /caminho        # Verificar permissões
sudo ls /caminho       # Acessar com privilégios

# Diretório não encontrado
pwd                    # Confirmar localização atual
ls -la ..             # Verificar diretório pai
find / -name "dir"    # Procurar diretório perdido
```

## Dicas de Produtividade

1. Use o histórico do shell sabiamente

2. Aprenda os atalhos do teclado

3. Configure aliases para comandos frequentes

4. Mantenha uma estrutura de diretórios organizada

5. Use autocompletar sempre que possível

Tip:

"A navegação eficiente no terminal é como um superpoder - quanto mais você pratica, mais poderoso se torna."



# Navegação Avançada 🚀

## Técnicas Avançadas de CD

### Navegação Contextual

```BASH
cd -                   # Alterna entre último diretório
cd ~-                  # Expande para último diretório
cd ~+                  # Expande para diretório atual
cd ~usuario            # Home de outro usuário
cd "$(dirname "$0")"   # Diretório do script atual
```

### Navegação com Variáveis

```BASH
# Variáveis de ambiente
echo $OLDPWD           # Último diretório
echo $PWD              # Diretório atual
echo $HOME             # Diretório home

# Variáveis customizadas
export PROJETOS=~/projetos
export LOGS=/var/log
cd $PROJETOS
```

### Navegação com Substituição

```BASH
# Substituição de comando
cd $(git rev-parse --show-toplevel)  # Raiz do git
cd "$(dirname "$(readlink -f "$0")")" # Dir real do script
cd "$(find . -name 'target' -type d)" # Resultado de busca
```

## Técnicas de Busca e Navegação

### Find Avançado

```BASH
# Navegação baseada em resultados
cd "$(find . -name 'pom.xml' -type f -exec dirname {} \;)"
cd "$(find . -type d -name 'src' | head -1)"
```

### CDPATH

```BASH
# Configurando CDPATH
export CDPATH=.:~/projetos:/var/www:/opt
cd projeto-x   # Procura em todos os caminhos do CDPATH
```

## Automação de Navegação

### Bookmarks de Diretório

```BASH
# Sistema de bookmarks
export DIR_BOOKMARKS=~/.dir_bookmarks

# Função para adicionar bookmark
bookmark() {
    echo "$(pwd)" >> "$DIR_BOOKMARKS"
}

# Função para ir para bookmark
goto() {
    local dir=$(grep -i "$1" "$DIR_BOOKMARKS" | head -1)
    if [ -d "$dir" ]; then
        cd "$dir"
    else
        echo "Bookmark não encontrado"
    fi
}
```

### Navegação por Projeto

```BASH
# Função para navegar entre projetos
project() {
    case $1 in
        web) cd ~/projetos/web ;;
        api) cd ~/projetos/api ;;
        docs) cd ~/projetos/documentacao ;;
        *) echo "Projeto não encontrado" ;;
    esac
}
```

## Integração com Ferramentas

### Git Navigation

```BASH
# Funções para navegação em repositórios git
cdroot() {
    cd "$(git rev-parse --show-toplevel)"
}

cdbranch() {
    git checkout $1
    cdroot
}
```

### Docker Navigation

```BASH
# Funções para navegação em containers
cdcontainer() {
    docker exec -it $1 /bin/bash
}
```

## Stack Navigation Avançada

### Pilha Customizada

```BASH
# Implementação avançada de pilha
declare -a DIR_STACK

pushd_custom() {
    DIR_STACK+=("$(pwd)")
    cd "$1"
}

popd_custom() {
    if [ ${#DIR_STACK[@]} -gt 0 ]; then
        local last_index=$((${#DIR_STACK[@]}-1))
        cd "${DIR_STACK[$last_index]}"
        unset 'DIR_STACK[$last_index]'
    fi
}
```

## Exercícios Avançados

### Nível Expert

1. Implemente um sistema de navegação baseado em tags

2. Crie uma função para navegar pelo histórico de diretórios

3. Desenvolva um menu interativo para navegação rápida

4. Integre navegação com ferramentas de desenvolvimento

### Desafios de Automação

1. Crie um script que mantém um log de diretórios visitados

2. Implemente navegação baseada em frequência de uso

3. Desenvolva um sistema de aliases dinâmicos

4. Crie uma função de busca e navegação combinada

## Dicas de Performance

1. Use cache de diretórios frequentes

2. Implemente completion customizado

3. Mantenha histórico de navegação

4. Use atalhos de teclado personalizados

5. Automatize padrões de navegação comuns

Tip:

"A verdadeira maestria na navegação do terminal vem da combinação de velocidade e precisão."



# Pilha de Diretórios 📚

## Comandos da Pilha

```BASH
pushd /var/log        # Empilha diretório atual e vai para /var/log
pushd /etc           # Empilha novamente
dirs                 # Mostra a pilha
popd                # Volta para o último diretório empilhado
dirs -v             # Mostra pilha numerada
pushd +2            # Vai para posição 2 da pilha
pushd -n            # Empilha sem mudar de diretório
dirs -c             # Limpa a pilha
```

## Usos Práticos

```BASH
# Salvando múltiplos caminhos
pushd ~/projetos
pushd /var/log
pushd /etc/nginx
dirs -v             # Ver todos os caminhos salvos
popd               # Voltar na ordem inversa
```

## Exercícios

1. Crie uma pilha com 3 diretórios diferentes

2. Navegue entre eles usando pushd +n

3. Limpe a pilha e comece uma nova



# Find e Locate: Buscas Avançadas 🔍

## Find - O Rastreador Supremo

```BASH
# Busca por nome
find . -name "*.log"              # Busca recursiva por logs
find . -iname "*.LOG"            # Case insensitive
find . -not -name "*.tmp"        # Exclusão
find . -path "*src*"            # Busca no caminho

# Busca por tipo
find . -type f                   # Apenas arquivos
find . -type d                   # Apenas diretórios
find . -type l                   # Apenas links simbólicos

# Busca por tempo
find . -mtime -7                 # Modificados nos últimos 7 dias
find . -mmin -60                # Modificados na última hora
```

## Locate - O Velocista

```BASH
# Configuração e atualização
sudo updatedb                    # Atualiza banco de dados
locate -S                       # Estatísticas do banco

# Buscas básicas
locate arquivo.txt              # Busca rápida
locate -i ARQUIVO.TXT          # Case insensitive
locate -e arquivo.txt         # Verifica existência
```

## Exercícios

1. Encontre todos os arquivos .log modificados hoje

2. Use locate para encontrar arquivos de configuração

3. Compare a velocidade entre find e locate



# Wildcards e Globbing: Dominando Padrões 🎯

## Wildcards Básicos

### Asterisco (*)

```BASH
# Exemplos básicos
ls *.txt               # Todos arquivos .txt
ls data*              # Tudo começando com "data"
ls *2023*             # Contém "2023" em qualquer lugar
ls /etc/*.d/          # Todos diretórios .d em /etc

# Combinações múltiplas
ls *.{jpg,png,gif}    # Todas as imagens
ls */*                # Arquivos em subdiretórios
ls **/*.sh           # Recursivo: todos .sh em qualquer nível
```

### Interrogação (?)

```BASH
# Substitui um caractere
ls file?.txt          # file1.txt, file2.txt, etc
ls ?.jpg              # Arquivos com um caractere
ls chapter_?.pdf      # chapter_1.pdf, chapter_2.pdf
```

## Globbing Avançado

### 

Conjuntos de Caracteres [...]

```BASH
# Intervalos
ls [a-z]*.txt         # Começa com minúscula
ls [A-Z]*.doc         # Começa com maiúscula
ls file[0-9].txt      # file seguido de um número

# Conjuntos específicos
ls [aeiou]*           # Começa com vogal
ls [!aeiou]*          # Não começa com vogal
ls [[:upper:]]*       # Começa com maiúscula
ls [[:digit:]]*       # Começa com número
```

### Extended Globbing

```BASH
# Ativar globbing estendido
shopt -s extglob

# Padrões
ls !(*.txt)           # Tudo exceto .txt
ls *(file|data)*      # Contém "file" ou "data"
ls +(*.jpg|*.png)     # Um ou mais arquivos de imagem
ls ?(test|prod).cfg   # test.cfg ou prod.cfg opcional
ls @(*.txt|*.doc)     # Exatamente um dos padrões
```

## Técnicas Avançadas

### Globbing com Find

```BASH
# Combinando com find
find . -name "*.txt" -o -name "*.doc"
find . -path "**/test/*.py"
find . -regex ".*\(test\|prod\).*\.cfg"
```

### Globbing em Scripts

```BASH
#!/bin/bash
# Configurações de globbing
shopt -s nullglob     # Arrays vazios para não-matches
shopt -s dotglob      # Inclui arquivos ocultos
shopt -s globstar     # Habilita **

# Processamento de arquivos
for file in **/*.{jpg,png,gif}; do
    echo "Processando: $file"
done
```

## Casos de Uso Comuns

### Organização de Arquivos

```BASH
# Mover por tipo
mv *{.jpg,.png} imagens/
mv *{.mp3,.wav} musicas/

# Backup seletivo
cp /etc/*.conf backup/
cp [A-Z]*.txt maiusculas/
```

### Processamento em Lote

```BASH
# Conversão de arquivos
for i in *.jpg; do
    convert "$i" "${i%.jpg}.png"
done

# Renomeação em massa
for f in [0-9]*.txt; do
    mv "$f" "arquivo_$f"
done
```

## Dicas e Truques

### Debug de Globbing

```BASH
# Ver expansões
set -x
ls *.txt
set +x

# Testar padrões
echo *.txt            # Ver o que será expandido
printf '%s\n' *       # Lista um por linha
```

### Segurança e Boas Práticas

```BASH
# Lidar com espaços
for file in "*.txt"; do  # Aspas importantes
    mv "$file" "novo_$file"
done

# Verificar existência
if compgen -G "*.txt" > /dev/null; then
    echo "Arquivos .txt encontrados"
fi
```

## Exercícios Práticos

### Básicos

1. Liste todos os arquivos PDF e DOCX

2. Encontre arquivos que começam com número

3. Mova todos os logs de 2023

4. Copie arquivos com vogais no nome

### Avançados

1. Use globbing estendido para organizar arquivos

2. Crie um script de backup seletivo

3. Implemente renomeação em massa com padrões

4. Desenvolva um sistema de classificação de arquivos

## Troubleshooting

### Problemas Comuns

```BASH
# Muito arquivos
# Use find em vez de globbing
find . -name "*.log" -exec rm {} \;

# Nomes complexos
# Use -print0 com xargs
find . -name "*.txt" -print0 | xargs -0 process
```

Tip:

"O domínio dos padrões de globbing é como ter superpoderes no terminal."



# Atalhos de Navegação: Velocidade Máxima ⚡

## Atalhos do Terminal

### Movimentação no Comando

```BASH
# Movimentação básica
CTRL + A              # Início da linha
CTRL + E              # Fim da linha
ALT + B               # Palavra anterior
ALT + F               # Próxima palavra
CTRL + XX             # Alterna entre início e posição atual

# Edição
CTRL + W              # Apaga palavra anterior
CTRL + U              # Apaga do cursor até início
CTRL + K              # Apaga do cursor até fim
CTRL + Y              # Cola último texto apagado
ALT + D               # Apaga próxima palavra
```

### Histórico e Busca

```BASH
# Navegação no histórico
CTRL + R              # Busca reversa no histórico
CTRL + S              # Busca para frente no histórico
CTRL + G              # Cancela busca
!!                    # Repete último comando
!$                    # Último argumento do comando anterior
!*                    # Todos argumentos do comando anterior

# Modificadores de histórico
!!:p                  # Exibe último comando sem executar
!-n                   # Executa comando n posições atrás
!string               # Executa último comando começando com string
^string1^string2^     # Substitui string1 por string2 no último comando
```

## Atalhos de Diretório

### Jumping Directories

```BASH
# Atalhos básicos
cd -                  # Último diretório
cd                    # Home
cd ~user              # Home do usuário
pushd +n              # Rotaciona n posições na pilha
popd                  # Remove topo da pilha

# Bookmarks personalizados
export CDPATH=.:~/projetos:/var/www
alias cdp='cd ~/projetos'
alias cdd='cd ~/Downloads'
alias cdw='cd ~/workspace'
```

### Smart Directory Navigation

```BASH
# Função de jump inteligente
j() {
    local dir
    dir=$(find ~/projetos -type d -name "*$1*" | head -1)
    if [ -d "$dir" ]; then
        cd "$dir"
    else
        echo "Diretório não encontrado"
    fi
}

# Auto-jumping baseado em frequência
frecent() {
    local dir
    dir=$(sort -rn ~/.frecent | grep -i "$1" | head -1 | cut -f2)
    [ -d "$dir" ] && cd "$dir"
}
```

## Atalhos de Comando

### Command Line Editing

```BASH
# Edição rápida
fc                    # Edita último comando
CTRL + X + E          # Edita comando atual no editor
set -o vi             # Modo vi
set -o emacs          # Modo emacs (padrão)

# Substituições rápidas
^foo^bar              # Substitui primeira ocorrência
!!:gs/foo/bar/        # Substitui todas ocorrências
```

### Command Completion

```BASH
# Tab completion avançado
complete -W "$(echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | grep -v "\["`;)" ssh
complete -F _command sudo
```

## Customização Avançada

### Aliases Inteligentes

```BASH
# Aliases condicionais
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ls='ls --color=auto'

# Aliases com funções
mcd() { mkdir -p "$1" && cd "$1"; }
cls() { cd "$1" && ls; }
```

### Keyboard Shortcuts

```BASH
# Bind customizado
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
bind '"\C-p": previous-history'
bind '"\C-n": next-history'
```

## Produtividade Máxima

### Workflow Optimization

```BASH
# Funções de produtividade
function mkcd() { mkdir -p "$@" && cd "$_"; }
function up() { cd $(printf "%0.s../" $(seq 1 $1)); }
function back() { cd "$OLDPWD"; }
```

### Task Automation

```BASH
# Scripts de automação
alias update='sudo apt update && sudo apt upgrade'
alias serve='python -m http.server'
alias ports='netstat -tulanp'
```

## Exercícios e Práticas

### Básicos

1. Configure aliases básicos

2. Pratique atalhos de movimentação

3. Use histórico eficientemente

4. Implemente bookmarks simples

### Avançados

1. Crie funções de navegação customizadas

2. Configure completion avançado

3. Implemente sistema de aliases dinâmicos

4. Desenvolva workflows automatizados

## Dicas de Performance

1. Memorize atalhos mais usados

2. Mantenha aliases organizados

3. Use completion sempre que possível

4. Automatize tarefas repetitivas

5. Mantenha histórico limpo e útil

Tip:

"A velocidade vem da prática, mas os atalhos são o caminho mais rápido para lá."



# Automação de Navegação: Poder Máximo 🤖

## Scripts de Navegação

### Navegador Inteligente

```BASH
#!/bin/bash
# smart_nav.sh
# Navegador inteligente com histórico e frequência

# Configuração
HISTORY_FILE="$HOME/.nav_history"
BOOKMARKS_FILE="$HOME/.nav_bookmarks"
touch "$HISTORY_FILE" "$BOOKMARKS_FILE"

# Função principal de navegação
smart_nav() {
    local target="$1"
    
    # Verifica bookmarks primeiro
    if grep -q "^$target:" "$BOOKMARKS_FILE"; then
        cd "$(grep "^$target:" "$BOOKMARKS_FILE" | cut -d: -f2)"
        return
    fi
    
    # Busca no histórico
    local dir=$(grep -i "$target" "$HISTORY_FILE" | sort -r | head -1)
    if [ -n "$dir" ] && [ -d "$dir" ]; then
        cd "$dir"
        return
    fi
    
    # Busca fuzzy em diretórios comuns
    local found=$(find ~/projetos ~/documentos -type d -iname "*$target*" 2>/dev/null | head -1)
    if [ -n "$found" ]; then
        cd "$found"
        return
    fi
    
    echo "Destino não encontrado: $target"
}
```

### Sistema de Bookmarks

```BASH
# Gerenciador de bookmarks
bookmark() {
    case "$1" in
        add)
            echo "$2:$(pwd)" >> "$BOOKMARKS_FILE"
            echo "Bookmark '$2' adicionado"
            ;;
        remove)
            sed -i "/^$2:/d" "$BOOKMARKS_FILE"
            echo "Bookmark '$2' removido"
            ;;
        list)
            cat "$BOOKMARKS_FILE"
            ;;
        *)
            echo "Uso: bookmark [add|remove|list] [nome]"
            ;;
    esac
}
```

## Automação de Workspace

### Projeto Automático

```BASH
# Configuração de workspace automática
setup_workspace() {
    local project="$1"
    local template="$2"
    
    # Cria estrutura base
    mkdir -p "$project"/{src,docs,tests,resources}
    
    # Aplica template se especificado
    if [ -n "$template" ] && [ -d "$HOME/.templates/$template" ]; then
        cp -r "$HOME/.templates/$template"/* "$project/"
    fi
    
    # Inicializa git
    cd "$project"
    git init
    
    # Cria arquivo de configuração
    cat > .workspace-config <<EOF
PROJECT_NAME=$project
CREATED_AT=$(date +%Y-%m-%d)
TEMPLATE=$template
EOF
    
    echo "Workspace $project configurado com sucesso!"
}
```

### Monitor de Diretório

```BASH
# Monitora mudanças e executa ações
watch_dir() {
    local dir="${1:-.}"
    local action="$2"
    
    inotifywait -m -e create,modify,delete "$dir" |
    while read -r directory events filename; do
        echo "Evento: $events em $filename"
        if [ -n "$action" ]; then
            eval "$action \"$filename\""
        fi
    done
}
```

## Automação de Tarefas

### Sincronização Automática

```BASH
# Sincroniza diretórios automaticamente
auto_sync() {
    local source="$1"
    local target="$2"
    local interval="${3:-300}" # 5 minutos padrão
    
    while true; do
        rsync -av --delete "$source/" "$target/"
        echo "Sincronizado em $(date)"
        sleep "$interval"
    done
}
```

### Limpeza Automática

```BASH
# Mantém diretórios organizados
auto_clean() {
    local dir="${1:-.}"
    local days="${2:-7}"
    
    # Remove arquivos antigos
    find "$dir" -type f -mtime +"$days" -delete
    
    # Organiza por extensão
    for file in "$dir"/*.*; do
        if [ -f "$file" ]; then
            ext="${file##*.}"
            mkdir -p "$dir/$ext"
            mv "$file" "$dir/$ext/"
        fi
    done
}
```

## Integração com Sistema

### Auto-mounting

```BASH
# Monta dispositivos automaticamente
auto_mount() {
    local device="$1"
    local mountpoint="$2"
    
    if [ ! -d "$mountpoint" ]; then
        sudo mkdir -p "$mountpoint"
    fi
    
    sudo mount "$device" "$mountpoint"
    echo "Montado $device em $mountpoint"
}
```

### Backup Automático

```BASH
# Sistema de backup incremental
auto_backup() {
    local source="$1"
    local dest="$2"
    local date=$(date +%Y%m%d)
    
    # Cria backup incremental
    rsync -av --link-dest="../latest" "$source/" "$dest/$date/"
    
    # Atualiza link do último backup
    ln -nsf "$date" "$dest/latest"
}
```

## Exemplos Práticos

### Workflow Desenvolvimento

```BASH
# Configura ambiente de desenvolvimento
dev_env() {
    local project="$1"
    
    # Terminal 1: Editor
    tmux new-session -d -s "$project"
    tmux send-keys "cd $project && vim" C-m
    
    # Terminal 2: Servidor
    tmux split-window -h
    tmux send-keys "cd $project && npm start" C-m
    
    # Terminal 3: Git
    tmux split-window -v
    tmux send-keys "cd $project && git status" C-m
    
    # Anexa à sessão
    tmux attach-session -t "$project"
}
```

### Monitor de Recursos

```BASH
# Monitora recursos do sistema
monitor_resources() {
    while true; do
        clear
        echo "=== Sistema ==="
        date
        echo "=== CPU ==="
        top -bn1 | head -n 3
        echo "=== Memória ==="
        free -h
        echo "=== Disco ==="
        df -h /
        sleep 5
    done
}
```

## Dicas e Boas Práticas

1. Mantenha logs de todas automações

2. Implemente tratamento de erros

3. Use variáveis de configuração

4. Documente todas as funções

5. Faça backup antes de automações críticas

Tip:

"Automatize tudo que fizer mais de duas vezes."



# Troubleshooting de Navegação: Resolvendo Problemas 🔧

## Problemas Comuns

### Permissões

```BASH
# Verificar permissões
ls -la                # Lista detalhada com permissões
namei -l /path/to/dir # Mostra permissões do caminho completo

# Corrigir permissões
chmod -R u+rwx dir    # Recursivamente adiciona permissões
chown -R user:group dir # Muda proprietário recursivamente
```

### Caminhos Quebrados

```BASH
# Verificar links simbólicos
find . -type l -ls    # Lista todos links
find . -xtype l       # Encontra links quebrados

# Corrigir links
ln -sf target link   # Força criação/atualização do link
realpath arquivo     # Mostra caminho real
```

## Ferramentas de Diagnóstico

### Análise de Sistema

```BASH
# Verificação de disco
df -h                 # Espaço em disco
du -sh *             # Uso por diretório
ncdu                 # Navegador de uso de disco

# Monitoramento
iotop                # Monitoramento de I/O
lsof                 # Arquivos abertos
fuser -m /path       # Processos usando diretório
```

### Debug de Navegação

```BASH
# Trace de comandos
set -x               # Ativa debug
pwd -P               # Mostra caminho físico
type cd              # Verifica definição do comando
echo $PATH           # Mostra variável PATH
```

## Recuperação

### Backup Rápido

```BASH
# Backup de segurança
cp -a dir dir.bak    # Copia preservando atributos
tar czf backup.tgz dir # Compacta diretório
rsync -av --delete source/ dest/ # Sincroniza com backup
```

### Restauração

```BASH
# Recuperar arquivos
cp -a dir.bak/* dir/ # Restaura do backup
tar xzf backup.tgz   # Extrai backup
git checkout -- file # Restaura do git
```

## Prevenção

### Verificações de Segurança

```BASH
# Checklist de segurança
function check_dir() {
    local dir="$1"
    echo "Verificando $dir..."
    
    # Permissões
    ls -ld "$dir"
    
    # Links simbólicos
    find "$dir" -type l -ls
    
    # Espaço
    du -sh "$dir"
    
    # Processos
    lsof +D "$dir"
}
```

### Monitoramento Proativo

```BASH
# Monitor de mudanças
inotifywait -m -r -e modify,create,delete /path/to/watch

# Logger de ações
function log_cd() {
    echo "$(date): cd $PWD" >> ~/.cd_history
}
trap 'log_cd' DEBUG
```

## Soluções Avançadas

### Recuperação de Diretório

```BASH
# Script de recuperação
recover_dir() {
    local dir="$1"
    
    # Verifica backup
    if [ -d "${dir}.bak" ]; then
        echo "Restaurando de backup..."
        rsync -av "${dir}.bak/" "$dir/"
        return
    fi
    
    # Tenta reconstruir
    mkdir -p "$dir"
    find . -name "$(basename "$dir")*" -type f -exec cp {} "$dir/" \;
}
```

### Limpeza de Sistema

```BASH
# Limpeza segura
safe_clean() {
    # Remove temporários
    find /tmp -type f -atime +7 -delete
    
    # Remove logs antigos
    find /var/log -type f -name "*.log.*" -mtime +30 -delete
    
    # Limpa caches
    rm -rf ~/.cache/*
}
```

## Casos Especiais

### Sistemas de Arquivos Especiais

```BASH
# Montagem NFS
mount -t nfs server:/share /mnt/nfs

# SSHFS
sshfs user@remote:/path /mnt/remote

# Verificação
mount | grep "type"
```

### Problemas de Rede

```BASH
# Debug de rede
ping -c 4 server     # Teste básico
traceroute server    # Rota até servidor
mtr server          # Monitoramento contínuo
```

## Checklist de Troubleshooting

1. Verificar Permissões

```BASH
ls -la
whoami
groups
```

1. Verificar Espaço

```BASH
df -h
du -sh *
```

1. Verificar Processos

```BASH
ps aux | grep dir
lsof +D /path
```

1. Verificar Logs

```BASH
tail -f /var/log/syslog
journalctl -f
```

## Dicas de Manutenção

### Manutenção Regular

```BASH
# Script de manutenção
maintenance() {
    echo "Iniciando manutenção..."
    
    # Verifica sistema de arquivos
    sudo fsck -f /dev/sda1
    
    # Limpa caches
    sudo sync && sudo sysctl -w vm.drop_caches=3
    
    # Otimiza banco de dados
    sudo updatedb
    
    echo "Manutenção concluída!"
}
```

### Monitoramento Contínuo

```BASH
# Monitor de saúde
health_check() {
    while true; do
        date
        df -h
        free -h
        uptime
        sleep 300
    done
}
```

Tip:

"Problemas são oportunidades de aprendizado disfarçadas."



